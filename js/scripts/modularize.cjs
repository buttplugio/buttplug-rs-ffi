// This script makes a few changes to the wasm->js bindings generated by wasm-pack
// and to the outputs of pbjs to make them compatible with NodeJS ESM support.

const fs = require("fs");

const header = `// BEGIN_MODULARIZE
// This file was modified by scripts/modularize.js to create Node ESM-compatible bindings.
// Do not modify this file directly as your changes will be overwritten.
// END_MODULARIZE
`;

const kind = process.argv[2];

if (!kind || (kind !== "wasm-pack" && kind !== "pbjs")) {
    console.error("Expected first argument to be 'wasm-pack' or 'pbjs'.");
    process.exit(-1);
}

// read input
if (kind === "wasm-pack") {
    modularizeWasmPackOutput();
}
else {
    modularizeProtobufOutput();
}

process.exit(0);

function hasIdentifier(text, id) {
    if (!/^[a-zA-Z_$][a-zA-Z_$0-9]*/.test(id)) throw new Error("identifier expected");
    return new RegExp(`\\b${id}\\b`).test(text);
}

function getSafeIdentifier(id, text) {
    let i = 0;
    let safeId = id;
    while (hasIdentifier(text, safeId)) {
        safeId = id + i++;
    }
    return safeId;
}

function isModularized(text, hash) {
    return text.startsWith(`// BEGIN_MODULARIZE${hash ? ` ${hash}` : ""}`);
}

function modularizeWasmPackOutput() {
    // To support NodeJS ESM modules, we need to load a W3C-compatible WebSocket
    // implementation and we need to inject a `module` object with a `require`
    // method that can be used by wasm to load NodeJS imports for crates
    // like 'getrandom' (used by 'uuid')

    let infile = "src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js";
    let nodeOutfile = "src/buttplug-rs-ffi/buttplug_rs_ffi_bg_node.js";
    let webOutfile = "src/buttplug-rs-ffi/buttplug_rs_ffi_bg_web.js";
    let text = fs.readFileSync(infile, { encoding: "utf8" });

    if (isModularized(text)) {
        console.log(`'${infile}' already modularized, skipping.`);
        return;
    }

    // write buttplug_rs_ffi_bg_web.js
    fs.writeFileSync(webOutfile, header + text, { encoding: "utf8" });

    // generate safe names for necessary imports
    const createRequireID = getSafeIdentifier("createRequire", text);
    const urlID = getSafeIdentifier("URL", text);
    const websocketID = getSafeIdentifier("websocket", text);

    // This imports a W3C-compatible WebSocket implementation and introduces a 
    // usable `module.require` in a NodeJS ES module.
    const imports = `
// import a compatible WebSocket implementation
import ${websocketID} from "websocket";
const { w3cwebsocket: WebSocket } = ${websocketID};

// import a compatible 'module.require' implementation
import { createRequire${createRequireID === "createRequire" ? "" : ` as ${createRequireID}`} } from "module";
import { URL${urlID === "URL" ? "" : ` as ${urlID}`}} from "url";
const module = {
    require: createRequire(new URL(import.meta.url))
};
`;

    text = header + imports + text;

    // write buttplug_rs_ffi_bg_node.js
    fs.writeFileSync(nodeOutfile, text, { encoding: "utf8" });

    // when running in NodeJS, the import is remapped to
    // `./dist/module/buttplug-rs-ffi/buttplug_rs_ffi_bg_node.js` by the `"imports"`
    // map in packag.ejson
    //
    // when running in the browser, the webpack.base.cjs file has a plugin that redirects
    // this to `./src/buttplug-rs-ffi/buttplug_rs_ffi_bg_web.js` when bundling.
    const redirect = `
export * from "#buttplug_rs_ffi_bg";
`;

    // overwrite buttplug_rs_ffi_bg.js with the redirect, above
    fs.writeFileSync(infile, header + redirect, { encoding: "utf8" });
    console.log(`'${infile}' modularized.`);
}

function modularizeProtobufOutput() {
    // For outputs from `pbjs`, we need to add the `.js` file extension to the `prototbufjs/minimal`
    // import to support Node's ESM loader requirements that all file imports include file extensions.

    let infile = "src/buttplug_ffi.js";
    let outfile = "src/buttplug_ffi.js";
    let text = fs.readFileSync(infile, { encoding: "utf8" });
    if (isModularized(text)) {
        console.log(`'${infile}' already modularized, skipping.`);
        return;
    }

    // add header and fix import so that it references `protobufjs/minimal.js`
    text = header + text.replace(`import * as $protobuf from "protobufjs/minimal"`, `import $protobuf from "protobufjs/minimal.js"`);

    // write the changes
    fs.writeFileSync(outfile, text, { encoding: "utf8" });
}
